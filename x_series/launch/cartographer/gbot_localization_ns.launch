<launch>
    <arg name="namespace"           default="bot_1"/>
		
    <!-- Load robot description and start state publisher-->
    <!--param name="robot_description" textfile="$(find accio_core)/urdf/head_2d.urdf" /-->

    <!--node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /-->
		
		<!-- Start RPLIDAR sensor node which provides LaserScan data  -->
    <!--node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen"-->
        <!--param name="serial_port" type="string" value="/dev/ttyUSB0"/-->
        <!--param name="serial_baudrate" type="int" value="115200"/-->
        <!--param name="frame_id" type="string" value="base_laser"/-->
        <!--param name="inverted" type="bool" value="false"/-->
        <!--param name="angle_compensate" type="bool" value="true"/-->
    <!--/node-->
		
		<!-- Start Google Cartographer node with custom configuration file-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" ns="$(arg namespace)" args="
          -configuration_directory
              $(find accio_core)/configuration_files
          -configuration_basename backpack_2d_localization.lua
          -load_state_filename /home/accio-j2/catkin_2/src/Robochef-2/accio_core/maps/cartographer_map.pbstream" output="screen" >
    </node>

		<!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" ns="$(arg namespace)" />
    
    <node name="publish_landmarks" pkg="accio_core" type="publish_landmarks.py">
      <param name="namespace" type="string" value="$(arg namespace)"/>
    </node>
    
</launch>
